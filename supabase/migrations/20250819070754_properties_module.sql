-- Properties module migration

-- 1) Properties table
create table public.properties (
  id bigint generated by default as identity primary key,
  created_at timestamptz not null default now(),
  name text not null,
  contact_id bigint references public.contacts(id) on update cascade on delete set null,
  address text,
  city text,
  state text,
  zipcode text,
  country text,
  gate_code text,
  access_notes text,
  notes text,
  photos_paths text[],
  lat numeric(9,6),
  lng numeric(9,6)
);
alter table public.properties enable row level security;

grant select, insert, update, delete on table public.properties to authenticated;

create policy "properties_select" on public.properties
  for select to authenticated using (true);
create policy "properties_insert" on public.properties
  for insert to authenticated with check (true);
create policy "properties_update" on public.properties
  for update to authenticated using (true);
create policy "properties_delete" on public.properties
  for delete to authenticated using (true);

-- 2) Add property to deals (nullable)
alter table public.deals
  add column if not exists property_id bigint references public.properties(id) on update cascade on delete set null;

-- 3) Storage bucket (private) for property photos
insert into storage.buckets (id, name, public)
values ('property-photos', 'property-photos', false)
on conflict (id) do nothing;

create policy if not exists "property_photos_select"
on storage.objects for select to authenticated
using (bucket_id = 'property-photos');
create policy if not exists "property_photos_insert"
on storage.objects for insert to authenticated
with check (bucket_id = 'property-photos');
create policy if not exists "property_photos_delete"
on storage.objects for delete to authenticated
using (bucket_id = 'property-photos');

-- 4) Summary view
create view public.properties_summary
with (security_invoker=on) as
select
  p.*,
  (coalesce(c.first_name,'') || case when c.first_name is null or c.last_name is null then '' else ' ' end || coalesce(c.last_name,'')) as contact_name,
  count(d.id)::int as nb_deals,
  max(d.created_at) as last_deal_date
from public.properties p
left join public.contacts c on c.id = p.contact_id
left join public.deals d on d.property_id = p.id
group by p.id, contact_name;


