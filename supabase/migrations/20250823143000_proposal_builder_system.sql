-- Proposal Builder System Migration
-- Based on PandaDoc analysis and existing Elite Landscaping CRM schema

-- ============================================================================
-- 1. PRODUCTS TABLE ENHANCEMENTS FOR PROPOSALS
-- ============================================================================

-- First, let's check if products table exists and enhance it for proposals
DO $$ 
BEGIN
    -- Create products table if it doesn't exist
    IF NOT EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'products') THEN
        CREATE TABLE public.products (
            id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            created_at timestamptz NOT NULL DEFAULT now(),
            updated_at timestamptz NOT NULL DEFAULT now(),
            name text NOT NULL,
            description text,
            category text,
            price decimal(10,2) NOT NULL DEFAULT 0,
            cost decimal(10,2), -- Internal cost for profit margin tracking
            sku text,
            unit text DEFAULT 'each',
            is_active boolean DEFAULT true,
            created_by uuid REFERENCES auth.users(id)
        );
        
        ALTER TABLE public.products ENABLE ROW LEVEL SECURITY;
        
        -- Basic RLS policies for products
        CREATE POLICY "products_select" ON public.products
            FOR SELECT TO authenticated USING (true);
        CREATE POLICY "products_insert" ON public.products
            FOR INSERT TO authenticated WITH CHECK (true);
        CREATE POLICY "products_update" ON public.products
            FOR UPDATE TO authenticated USING (true);
        CREATE POLICY "products_delete" ON public.products
            FOR DELETE TO authenticated USING (true);
            
        -- Grant permissions
        GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE public.products TO authenticated;
    END IF;
END $$;

-- Add proposal-specific columns to products table
-- Note: products table already exists with photos_paths column
ALTER TABLE public.products 
    ADD COLUMN IF NOT EXISTS proposal_category text,
    ADD COLUMN IF NOT EXISTS is_proposal_visible boolean DEFAULT true,
    ADD COLUMN IF NOT EXISTS proposal_description text,
    ADD COLUMN IF NOT EXISTS is_optional boolean DEFAULT false, -- For client selection
    ADD COLUMN IF NOT EXISTS sort_order integer DEFAULT 0;

-- Add category column if it doesn't exist (for backward compatibility)
ALTER TABLE public.products 
    ADD COLUMN IF NOT EXISTS category text;

-- Create indexes for proposal functionality
CREATE INDEX IF NOT EXISTS idx_products_proposal_category ON public.products(proposal_category);
CREATE INDEX IF NOT EXISTS idx_products_proposal_visible ON public.products(is_proposal_visible);
CREATE INDEX IF NOT EXISTS idx_products_sort_order ON public.products(sort_order);

-- ============================================================================
-- 2. DEAL LINE ITEMS TABLE ENHANCEMENTS
-- ============================================================================

-- Note: deal_line_items table already exists with columns:
-- id, created_at, deal_id, product_id, name, description, sku, cost, price, quantity, photo_path

-- Add missing columns for proposal compatibility
ALTER TABLE public.deal_line_items 
    ADD COLUMN IF NOT EXISTS unit text DEFAULT 'each',
    ADD COLUMN IF NOT EXISTS sort_order integer DEFAULT 0,
    ADD COLUMN IF NOT EXISTS updated_at timestamptz DEFAULT now();

-- Add computed columns for consistency with proposal_line_items
-- Note: Using existing 'price' and 'cost' columns from current schema
ALTER TABLE public.deal_line_items 
    ADD COLUMN IF NOT EXISTS total_price decimal(10,2) GENERATED ALWAYS AS (quantity * price) STORED,
    ADD COLUMN IF NOT EXISTS total_cost decimal(10,2) GENERATED ALWAYS AS (quantity * cost) STORED;

-- Create indexes if they don't exist
CREATE INDEX IF NOT EXISTS idx_deal_line_items_deal_id ON public.deal_line_items(deal_id);
CREATE INDEX IF NOT EXISTS idx_deal_line_items_product_id ON public.deal_line_items(product_id);
CREATE INDEX IF NOT EXISTS idx_deal_line_items_sort ON public.deal_line_items(deal_id, sort_order);

-- ============================================================================
-- 3. PROPOSAL TEMPLATES TABLE
-- ============================================================================

CREATE TABLE public.proposal_templates (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name text NOT NULL,
    description text,
    structure jsonb NOT NULL DEFAULT '{}', -- Section configuration and layout
    default_sections jsonb NOT NULL DEFAULT '[]', -- Default sections for new proposals
    is_active boolean DEFAULT true,
    is_default boolean DEFAULT false, -- Mark one template as default
    created_by uuid REFERENCES auth.users(id),
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now()
);

ALTER TABLE public.proposal_templates ENABLE ROW LEVEL SECURITY;

-- RLS policies for proposal templates
CREATE POLICY "proposal_templates_select" ON public.proposal_templates
    FOR SELECT TO authenticated USING (true);
CREATE POLICY "proposal_templates_insert" ON public.proposal_templates
    FOR INSERT TO authenticated WITH CHECK (true);
CREATE POLICY "proposal_templates_update" ON public.proposal_templates
    FOR UPDATE TO authenticated USING (true);
CREATE POLICY "proposal_templates_delete" ON public.proposal_templates
    FOR DELETE TO authenticated USING (true);

-- Grant permissions
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE public.proposal_templates TO authenticated;

-- Indexes
CREATE INDEX idx_proposal_templates_active ON public.proposal_templates(is_active);
CREATE INDEX idx_proposal_templates_default ON public.proposal_templates(is_default);

-- ============================================================================
-- 4. PROPOSALS TABLE
-- ============================================================================

CREATE TABLE public.proposals (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    deal_id bigint REFERENCES public.deals(id) ON DELETE CASCADE,
    template_id bigint REFERENCES public.proposal_templates(id) ON DELETE SET NULL,
    title text NOT NULL,
    status text DEFAULT 'draft', -- draft, sent, viewed, accepted, rejected, expired
    data jsonb NOT NULL DEFAULT '{}', -- Complete proposal structure and content
    client_data jsonb DEFAULT '{}', -- Client-specific customizations and selections
    sections jsonb NOT NULL DEFAULT '[]', -- Section configuration with visibility
    subtotal decimal(10,2) DEFAULT 0,
    tax_rate decimal(5,4) DEFAULT 0.0825, -- 8.25% default tax rate
    tax_amount decimal(10,2) DEFAULT 0,
    total_amount decimal(10,2) DEFAULT 0,
    deposit_amount decimal(10,2) DEFAULT 0,
    
    -- PDF and document management
    pdf_path text, -- Path to generated PDF in proposal-pdfs bucket
    pdf_generated_at timestamptz, -- When PDF was last generated
    is_template boolean DEFAULT false, -- Mark as reusable template
    original_proposal_id bigint REFERENCES public.proposals(id), -- For duplicated proposals
    
    -- Tracking fields
    sent_at timestamptz,
    viewed_at timestamptz,
    first_viewed_at timestamptz,
    view_count integer DEFAULT 0,
    responded_at timestamptz,
    expires_at timestamptz,
    
    -- Metadata
    created_by uuid REFERENCES auth.users(id),
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now()
);

ALTER TABLE public.proposals ENABLE ROW LEVEL SECURITY;

-- RLS policies for proposals
CREATE POLICY "proposals_select" ON public.proposals
    FOR SELECT TO authenticated USING (true);
CREATE POLICY "proposals_insert" ON public.proposals
    FOR INSERT TO authenticated WITH CHECK (true);
CREATE POLICY "proposals_update" ON public.proposals
    FOR UPDATE TO authenticated USING (true);
CREATE POLICY "proposals_delete" ON public.proposals
    FOR DELETE TO authenticated USING (true);

-- Grant permissions
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE public.proposals TO authenticated;

-- Indexes for proposals
CREATE INDEX idx_proposals_deal_id ON public.proposals(deal_id);
CREATE INDEX idx_proposals_status ON public.proposals(status);
CREATE INDEX idx_proposals_created_at ON public.proposals(created_at);
CREATE INDEX idx_proposals_sent_at ON public.proposals(sent_at);

-- ============================================================================
-- 5. PROPOSAL LINE ITEMS TABLE
-- ============================================================================

CREATE TABLE public.proposal_line_items (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    proposal_id bigint REFERENCES public.proposals(id) ON DELETE CASCADE,
    product_id bigint REFERENCES public.products(id) ON DELETE SET NULL,
    section_name text NOT NULL DEFAULT 'General',
    name text NOT NULL,
    description text,
    image_paths text[], -- Product images for this line item
    quantity decimal(10,2) NOT NULL DEFAULT 1,
    unit text DEFAULT 'each',
    unit_price decimal(10,2) NOT NULL,
    unit_cost decimal(10,2), -- Internal cost (hidden from client)
    total_price decimal(10,2) GENERATED ALWAYS AS (quantity * unit_price) STORED,
    total_cost decimal(10,2) GENERATED ALWAYS AS (quantity * unit_cost) STORED, -- Internal total cost
    
    -- Client-facing controls
    is_visible_to_client boolean DEFAULT true,
    is_optional boolean DEFAULT false, -- Client can select/deselect
    is_selected_by_client boolean DEFAULT true, -- Current client selection
    
    -- Organization
    sort_order integer DEFAULT 0,
    section_sort_order integer DEFAULT 0,
    
    -- Metadata
    custom_data jsonb DEFAULT '{}', -- Extensible metadata
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now()
);

ALTER TABLE public.proposal_line_items ENABLE ROW LEVEL SECURITY;

-- RLS policies for proposal line items
CREATE POLICY "proposal_line_items_select" ON public.proposal_line_items
    FOR SELECT TO authenticated USING (true);
CREATE POLICY "proposal_line_items_insert" ON public.proposal_line_items
    FOR INSERT TO authenticated WITH CHECK (true);
CREATE POLICY "proposal_line_items_update" ON public.proposal_line_items
    FOR UPDATE TO authenticated USING (true);
CREATE POLICY "proposal_line_items_delete" ON public.proposal_line_items
    FOR DELETE TO authenticated USING (true);

-- Grant permissions
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE public.proposal_line_items TO authenticated;

-- Indexes for proposal line items
CREATE INDEX idx_proposal_line_items_proposal_id ON public.proposal_line_items(proposal_id);
CREATE INDEX idx_proposal_line_items_product_id ON public.proposal_line_items(product_id);
CREATE INDEX idx_proposal_line_items_section ON public.proposal_line_items(section_name);
CREATE INDEX idx_proposal_line_items_sort ON public.proposal_line_items(proposal_id, section_sort_order, sort_order);
CREATE INDEX idx_proposal_line_items_visible ON public.proposal_line_items(is_visible_to_client);

-- ============================================================================
-- 6. STORAGE BUCKETS FOR IMAGES AND PDFS
-- ============================================================================

-- Note: Existing buckets found via MCP analysis:
-- - 'attachments' (public) - General file attachments
-- - 'products' (public) - Product images (already exists!)
-- - 'property-photos' (private) - Property images  
-- - 'google-photos' (private) - Google Photos integration

-- Create proposal images bucket (private) - for proposal-specific custom images
INSERT INTO storage.buckets (id, name, public)
VALUES ('proposal-images', 'proposal-images', false)
ON CONFLICT (id) DO NOTHING;

-- Create proposal PDFs bucket (private) - for generated proposal PDFs
INSERT INTO storage.buckets (id, name, public)
VALUES ('proposal-pdfs', 'proposal-pdfs', false)
ON CONFLICT (id) DO NOTHING;

-- RLS policies for existing products bucket (public bucket, but add auth policies for consistency)
CREATE POLICY IF NOT EXISTS "products_bucket_select"
ON storage.objects FOR SELECT TO authenticated
USING (bucket_id = 'products');

CREATE POLICY IF NOT EXISTS "products_bucket_insert"
ON storage.objects FOR INSERT TO authenticated
WITH CHECK (bucket_id = 'products');

CREATE POLICY IF NOT EXISTS "products_bucket_update"
ON storage.objects FOR UPDATE TO authenticated
USING (bucket_id = 'products');

CREATE POLICY IF NOT EXISTS "products_bucket_delete"
ON storage.objects FOR DELETE TO authenticated
USING (bucket_id = 'products');

-- RLS policies for proposal images bucket
CREATE POLICY IF NOT EXISTS "proposal_images_select"
ON storage.objects FOR SELECT TO authenticated
USING (bucket_id = 'proposal-images');

CREATE POLICY IF NOT EXISTS "proposal_images_insert"
ON storage.objects FOR INSERT TO authenticated
WITH CHECK (bucket_id = 'proposal-images');

CREATE POLICY IF NOT EXISTS "proposal_images_update"
ON storage.objects FOR UPDATE TO authenticated
USING (bucket_id = 'proposal-images');

CREATE POLICY IF NOT EXISTS "proposal_images_delete"
ON storage.objects FOR DELETE TO authenticated
USING (bucket_id = 'proposal-images');

-- RLS policies for proposal PDFs bucket
CREATE POLICY IF NOT EXISTS "proposal_pdfs_select"
ON storage.objects FOR SELECT TO authenticated
USING (bucket_id = 'proposal-pdfs');

CREATE POLICY IF NOT EXISTS "proposal_pdfs_insert"
ON storage.objects FOR INSERT TO authenticated
WITH CHECK (bucket_id = 'proposal-pdfs');

CREATE POLICY IF NOT EXISTS "proposal_pdfs_update"
ON storage.objects FOR UPDATE TO authenticated
USING (bucket_id = 'proposal-pdfs');

CREATE POLICY IF NOT EXISTS "proposal_pdfs_delete"
ON storage.objects FOR DELETE TO authenticated
USING (bucket_id = 'proposal-pdfs');

-- ============================================================================
-- 7. VIEWS FOR ENHANCED FUNCTIONALITY
-- ============================================================================

-- Enhanced products view with proposal context
CREATE OR REPLACE VIEW public.products_proposal_summary
WITH (security_invoker=on) AS
SELECT 
    p.*,
    COALESCE(COUNT(DISTINCT pli.id), 0) as times_used_in_proposals,
    COALESCE(SUM(pli.quantity), 0) as total_quantity_proposed,
    COALESCE(AVG(pli.unit_price), p.price) as avg_proposal_price,
    MAX(pli.created_at) as last_used_in_proposal
FROM public.products p
LEFT JOIN public.proposal_line_items pli ON p.id = pli.product_id
WHERE p.is_proposal_visible = true
GROUP BY p.id;

-- Proposals summary view
-- Note: Adjusted for actual schema - contacts.email is in email_jsonb, contact_ids is array
CREATE OR REPLACE VIEW public.proposals_summary
WITH (security_invoker=on) AS
SELECT 
    p.*,
    d.name as deal_name,
    d.stage as deal_stage,
    CONCAT(c.first_name, ' ', c.last_name) as contact_name,
    c.email_jsonb->>'primary' as contact_email,
    co.name as company_name,
    pt.name as template_name,
    COUNT(DISTINCT pli.id) as line_item_count,
    COUNT(DISTINCT pli.section_name) as section_count,
    COALESCE(SUM(CASE WHEN pli.is_selected_by_client THEN pli.total_price ELSE 0 END), 0) as selected_total
FROM public.proposals p
LEFT JOIN public.deals d ON p.deal_id = d.id
LEFT JOIN public.contacts c ON d.contact_ids @> ARRAY[c.id]
LEFT JOIN public.companies co ON d.company_id = co.id
LEFT JOIN public.proposal_templates pt ON p.template_id = pt.id
LEFT JOIN public.proposal_line_items pli ON p.id = pli.proposal_id
GROUP BY p.id, d.name, d.stage, c.first_name, c.last_name, c.email_jsonb, co.name, pt.name;

-- Section summary for proposals
CREATE OR REPLACE VIEW public.proposal_sections_summary
WITH (security_invoker=on) AS
SELECT 
    pli.proposal_id,
    pli.section_name,
    COUNT(*) as item_count,
    SUM(pli.total_price) as section_total,
    SUM(CASE WHEN pli.is_selected_by_client THEN pli.total_price ELSE 0 END) as selected_total,
    MIN(pli.section_sort_order) as section_sort_order,
    BOOL_AND(pli.is_visible_to_client) as all_items_visible
FROM public.proposal_line_items pli
GROUP BY pli.proposal_id, pli.section_name;

-- ============================================================================
-- 8. FUNCTIONS FOR PROPOSAL CALCULATIONS
-- ============================================================================

-- Function to recalculate proposal totals
CREATE OR REPLACE FUNCTION public.recalculate_proposal_totals(proposal_id_param bigint)
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    calculated_subtotal decimal(10,2);
    calculated_tax decimal(10,2);
    calculated_total decimal(10,2);
    current_tax_rate decimal(5,4);
BEGIN
    -- Get current tax rate for the proposal
    SELECT tax_rate INTO current_tax_rate
    FROM public.proposals
    WHERE id = proposal_id_param;
    
    -- Calculate subtotal from selected line items
    SELECT COALESCE(SUM(total_price), 0)
    INTO calculated_subtotal
    FROM public.proposal_line_items
    WHERE proposal_id = proposal_id_param 
    AND is_selected_by_client = true;
    
    -- Calculate tax
    calculated_tax := calculated_subtotal * current_tax_rate;
    calculated_total := calculated_subtotal + calculated_tax;
    
    -- Update proposal totals
    UPDATE public.proposals
    SET 
        subtotal = calculated_subtotal,
        tax_amount = calculated_tax,
        total_amount = calculated_total,
        updated_at = now()
    WHERE id = proposal_id_param;
END;
$$;

-- Function to duplicate a proposal
CREATE OR REPLACE FUNCTION public.duplicate_proposal(
    original_proposal_id_param bigint,
    new_title_param text DEFAULT NULL,
    new_deal_id_param bigint DEFAULT NULL
)
RETURNS bigint
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    new_proposal_id bigint;
    original_proposal public.proposals%ROWTYPE;
    line_item public.proposal_line_items%ROWTYPE;
BEGIN
    -- Get the original proposal
    SELECT * INTO original_proposal
    FROM public.proposals
    WHERE id = original_proposal_id_param;
    
    IF NOT FOUND THEN
        RAISE EXCEPTION 'Original proposal with id % not found', original_proposal_id_param;
    END IF;
    
    -- Create new proposal with copied data
    INSERT INTO public.proposals (
        deal_id,
        template_id,
        title,
        status,
        data,
        client_data,
        sections,
        tax_rate,
        deposit_amount,
        original_proposal_id,
        created_by
    ) VALUES (
        COALESCE(new_deal_id_param, original_proposal.deal_id),
        original_proposal.template_id,
        COALESCE(new_title_param, original_proposal.title || ' (Copy)'),
        'draft', -- Always start as draft
        original_proposal.data,
        original_proposal.client_data,
        original_proposal.sections,
        original_proposal.tax_rate,
        original_proposal.deposit_amount,
        original_proposal_id_param,
        auth.uid()
    ) RETURNING id INTO new_proposal_id;
    
    -- Copy all line items
    FOR line_item IN 
        SELECT * FROM public.proposal_line_items 
        WHERE proposal_id = original_proposal_id_param
    LOOP
        INSERT INTO public.proposal_line_items (
            proposal_id,
            product_id,
            section_name,
            name,
            description,
            image_paths,
            quantity,
            unit,
            unit_price,
            unit_cost,
            is_visible_to_client,
            is_optional,
            is_selected_by_client,
            sort_order,
            section_sort_order,
            custom_data
        ) VALUES (
            new_proposal_id,
            line_item.product_id,
            line_item.section_name,
            line_item.name,
            line_item.description,
            line_item.image_paths,
            line_item.quantity,
            line_item.unit,
            line_item.unit_price,
            line_item.unit_cost,
            line_item.is_visible_to_client,
            line_item.is_optional,
            line_item.is_selected_by_client,
            line_item.sort_order,
            line_item.section_sort_order,
            line_item.custom_data
        );
    END LOOP;
    
    -- Recalculate totals for the new proposal
    PERFORM public.recalculate_proposal_totals(new_proposal_id);
    
    RETURN new_proposal_id;
END;
$$;

-- ============================================================================
-- 9. TRIGGERS FOR AUTOMATIC CALCULATIONS
-- ============================================================================

-- Trigger function to recalculate totals when line items change
CREATE OR REPLACE FUNCTION public.trigger_recalculate_proposal_totals()
RETURNS trigger
LANGUAGE plpgsql
AS $$
BEGIN
    -- Handle INSERT and UPDATE
    IF TG_OP IN ('INSERT', 'UPDATE') THEN
        PERFORM public.recalculate_proposal_totals(NEW.proposal_id);
        RETURN NEW;
    END IF;
    
    -- Handle DELETE
    IF TG_OP = 'DELETE' THEN
        PERFORM public.recalculate_proposal_totals(OLD.proposal_id);
        RETURN OLD;
    END IF;
    
    RETURN NULL;
END;
$$;

-- Create trigger on proposal line items
DROP TRIGGER IF EXISTS trigger_proposal_line_items_totals ON public.proposal_line_items;
CREATE TRIGGER trigger_proposal_line_items_totals
    AFTER INSERT OR UPDATE OR DELETE ON public.proposal_line_items
    FOR EACH ROW
    EXECUTE FUNCTION public.trigger_recalculate_proposal_totals();

-- ============================================================================
-- 10. DEFAULT DATA
-- ============================================================================

-- Insert default proposal template
INSERT INTO public.proposal_templates (name, description, structure, default_sections, is_default)
VALUES (
    'Elite Landscaping Standard Proposal',
    'Standard proposal template for landscaping services',
    '{
        "theme": {
            "primaryColor": "#0A2243",
            "accentColor": "#FCBB1C",
            "fontFamily": "Raleway"
        },
        "layout": {
            "showImages": true,
            "showDescriptions": true,
            "showCosts": false
        }
    }',
    '[
        {
            "name": "Landscape Management",
            "description": "Ongoing maintenance and care services",
            "sortOrder": 1,
            "isVisible": true
        },
        {
            "name": "Installation Services", 
            "description": "New installations and improvements",
            "sortOrder": 2,
            "isVisible": true
        },
        {
            "name": "Additional Services",
            "description": "Optional add-on services",
            "sortOrder": 3,
            "isVisible": true
        }
    ]',
    true
) ON CONFLICT DO NOTHING;

-- Insert sample product categories for proposals
UPDATE public.products 
SET proposal_category = CASE 
    WHEN category LIKE '%maintenance%' OR category LIKE '%mowing%' THEN 'Landscape Management'
    WHEN category LIKE '%install%' OR category LIKE '%plant%' THEN 'Installation Services'
    ELSE 'Additional Services'
END
WHERE proposal_category IS NULL;

-- ============================================================================
-- 12. INTEGRATION WITH EXISTING TABLES
-- ============================================================================

-- Add proposal reference to existing jobs table for workflow integration
ALTER TABLE public.jobs 
    ADD COLUMN IF NOT EXISTS proposal_id bigint REFERENCES public.proposals(id) ON DELETE SET NULL;

-- Create index for jobs-proposal relationship
CREATE INDEX IF NOT EXISTS idx_jobs_proposal_id ON public.jobs(proposal_id);

-- Function to create job from accepted proposal
CREATE OR REPLACE FUNCTION public.create_job_from_proposal(
    proposal_id_param bigint,
    scheduled_at_param timestamptz DEFAULT NULL
)
RETURNS bigint
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    new_job_id bigint;
    proposal_record public.proposals%ROWTYPE;
    deal_record public.deals%ROWTYPE;
BEGIN
    -- Get the proposal and related deal
    SELECT * INTO proposal_record
    FROM public.proposals
    WHERE id = proposal_id_param;
    
    IF NOT FOUND THEN
        RAISE EXCEPTION 'Proposal with id % not found', proposal_id_param;
    END IF;
    
    SELECT * INTO deal_record
    FROM public.deals
    WHERE id = proposal_record.deal_id;
    
    -- Create job from proposal
    INSERT INTO public.jobs (
        deal_id,
        property_id,
        proposal_id,
        status,
        scheduled_at,
        notes
    ) VALUES (
        proposal_record.deal_id,
        deal_record.property_id,
        proposal_id_param,
        'Unscheduled',
        scheduled_at_param,
        'Job created from proposal: ' || proposal_record.title
    ) RETURNING id INTO new_job_id;
    
    RETURN new_job_id;
END;
$$;

-- ============================================================================
-- 11. COMMENTS FOR DOCUMENTATION
-- ============================================================================

COMMENT ON TABLE public.proposal_templates IS 'Reusable proposal templates with section configurations';
COMMENT ON TABLE public.proposals IS 'Individual proposal instances linked to deals';
COMMENT ON TABLE public.proposal_line_items IS 'Line items within proposals with client selection controls';

COMMENT ON COLUMN public.proposals.data IS 'Complete proposal structure including sections, styling, and content';
COMMENT ON COLUMN public.proposals.client_data IS 'Client-specific selections and customizations';
COMMENT ON COLUMN public.proposals.sections IS 'Section configuration with visibility and ordering';

COMMENT ON COLUMN public.proposal_line_items.is_visible_to_client IS 'Whether this item appears on client-facing proposal';
COMMENT ON COLUMN public.proposal_line_items.is_optional IS 'Whether client can select/deselect this item';
COMMENT ON COLUMN public.proposal_line_items.is_selected_by_client IS 'Current client selection status';
COMMENT ON COLUMN public.proposal_line_items.unit_cost IS 'Internal cost - never visible to client';

COMMENT ON FUNCTION public.recalculate_proposal_totals(bigint) IS 'Recalculates subtotal, tax, and total for a proposal based on selected line items';
